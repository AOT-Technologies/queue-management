{
	"info": {
		"_postman_id": "4b52746f-404b-42fb-b245-2e2ef396b2bb",
		"name": "Queue-Management API Tests",
		"description": "Test the back end APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CFMS-Setup",
			"description": "This folder performs basic authentication features.",
			"item": [
				{
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386cf22-bb0f-47d9-9c22-cda162ed4375",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token\", 0);\n\t    pm.environment.set(\"refresh_token\", 0);\n\t    pm.environment.set(\"token_expires\", 0);\n\t    pm.environment.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1d0ab5c-fe6b-4e6d-8778-417ae879cee1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.environment.set(\"token\", jsonData.access_token);\n      pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n      pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "365727f4-696d-4e44-a379-5eba3001641a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nrefresh_token = pm.environment.get(\"refresh_token\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check application health",
			"description": "Checks the application health by calling the healthz and readyz endpoints",
			"item": [
				{
					"name": "Check the healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccc7505a-b745-4e58-be10-d3ad79f4fa2b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application health', function() {",
									"    ",
									"    it('Response time should be below 200ms', function() {",
									"        pm.response.responseTime.should.be.below(200);",
									"    });",
									"    ",
									"    it('Response statusCode should be 200', function() {",
									"        response.should.have.status(200);",
									"    });",
									"    it('Response header should have Content-Type of application/json', function() {",
									"        response.should.have.header('content-type', 'application/json');",
									"    });",
									"    it('Response body be in JSON format', function() {",
									"        response.should.be.json; ",
									"    });",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27c48038-bfb2-4c8a-97f6-0416c039489e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application readiness', function() {",
									"    ",
									"    it('Response time should be below 200ms', function() {",
									"        pm.response.responseTime.should.be.below(200);",
									"    });",
									"    ",
									"    it('Response statusCode should be 200', function() {",
									"        response.should.have.status(200);",
									"    });",
									"    it('Response header should have Content-Type of application/json', function() {",
									"        response.should.have.header('content-type', 'application/json');",
									"    });",
									"    it('Response body be in JSON format', function() {",
									"        response.should.be.json; ",
									"    });",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is ready');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CFMS-AuthenticateTestUsers",
			"description": "",
			"item": [
				{
					"name": "Authenticate environment.userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "295d6a7f-fb60-4dca-a533-1c43f89ea80b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				}
			]
		},
		{
			"name": "CFMS-TestClientsTokenHandling",
			"description": "",
			"item": [
				{
					"name": "Get client list no token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f94771e0-0fb1-46ac-8e92-398f05ab331f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e32de87-389d-4458-b257-5f69245973d2",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, no authentication', function() {",
									"   it('Response statusCode should be 401', function() {",
									"     response.should.have.status(401);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"       //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"       var jsonData = JSON.parse(response.body);",
									"       jsonData.should.have.property(\"error\");",
									"       jsonData.should.have.property(\"error_description\");",
									"   });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}clients/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get client list invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8627634e-763c-4b28-94ee-7e1980314069",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, invalid authentication', function() {",
									"   it('Response statusCode should be 401', function() {",
									"     response.should.have.status(401);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"       //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"       var jsonData = JSON.parse(response.body);",
									"       jsonData.should.have.property(\"error\");",
									"       jsonData.should.have.property(\"error_description\");",
									"   });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer andDUF9sV18wd1V2b1NzV3F6NVFtRlFFIn0.eyJqdGkiOiIzMWU0M2E4"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}clients/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get client list valid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "41452f10-af30-4a19-a90e-46c4496ee558",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, valid authentication', function() {",
									"  it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"  });",
									"  it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"  });",
									"  it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"  });",
									"  it(\"Response should have 'id', 'name' and 'office_id' properties\", function() {",
									"      var jsonData = response.body;",
									"      if (jsonData.length !== 0) {",
									"          var firstClient = jsonData[0];",
									"          firstClient.should.have.property(\"id\");",
									"          firstClient.should.have.property(\"name\");",
									"          firstClient.should.have.property(\"office_id\");",
									"      }",
									"  });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "CFMS-TestClientsEndpointsSetup",
			"description": "Clears the client list so that tests can begin",
			"item": [
				{
					"name": "Delete client queue driver",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cdd16320-1100-4bfc-ac6c-4e37bc93f59a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Get json return data.",
									"var jsonData = response.body;",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"id\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"office_id\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"id\", \"name\", \"office_id\"]",
									"}",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, valid authentication', function() {",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have 'id', 'name' and 'office_id' properties\", function() {",
									"       if (jsonData.length !== 0) {",
									"           var firstClient = jsonData[0];",
									"           firstClient.should.have.property(\"id\");",
									"           firstClient.should.have.property(\"name\");",
									"           firstClient.should.have.property(\"office_id\");",
									"       }",
									"   });",
									"});",
									"",
									"//  ",
									"",
									"//  Create a list of client IDs.",
									"var citizenIds = [];",
									"",
									"//  Loop to do tests, gather IDs.",
									"jsonData.forEach(function(citizen) {",
									"    var testTitle = \"Citizen \" + citizen.id + \" conforms to schema\";",
									"    citizenIds.push(citizen.id);",
									"    tests[testTitle] = tv4.validate(citizen, schema);",
									"});",
									"",
									"//  Set the current_client, to be deleted.",
									"postman.setEnvironmentVariable(\"current_client\", citizenIds.shift());",
									"postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"",
									"//  Set the next request to execute.",
									"postman.setNextRequest(\"Delete client queue item\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}clients/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Delete client queue item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b5d87a3-e805-470e-a3ce-a6e1c581687a",
								"type": "text/javascript",
								"exec": [
									"// Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"var title = \"Testing clearing queue: Citizen \" + postman.getEnvironmentVariable(\"current_client\");",
									"",
									"// Test the authenticate response.",
									"describe(title, function() {",
									"  it('Response statusCode should be 204 (no content)', function() {",
									"     response.should.have.status(204);",
									"  });",
									"  it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"  });",
									"});",
									"",
									"//  Get the list of citizens still needing to be deleted.",
									"var citizenIds = JSON.parse(postman.getEnvironmentVariable(\"current_queue\"));",
									"",
									"//  See if more IDs to clear.",
									"if (citizenIds.length > 0) {",
									"    ",
									"    //  Set the next current_client to be deleted.",
									"    postman.setEnvironmentVariable(\"current_client\", citizenIds.shift());",
									"    postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"",
									"    //  Delete the next citizen.",
									"    postman.setNextRequest(\"Delete client queue item\");",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients/{{current_client}}/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"name": "CFMS-TestClientsEndpoints",
			"description": "Test all the clients endpoints",
			"item": [
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d908d2a-965c-437c-885f-4c990d54738f",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"//  eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"// describe('Testing clients endpoint, valid authentication', function() {",
									"//   it('Response statusCode should be 200', function() {",
									"//      response.should.have.status(200);",
									"//   });",
									"//   it('Response header should have Content-Type of application/json', function() {",
									"//     response.should.have.header('content-type', 'application/json');",
									"//   });",
									"//   it('Response body be in JSON format', function() {",
									"//       response.should.be.json; ",
									"//   });",
									"//   it(\"Response should have 'id', 'name' and 'office_id' properties\", function() {",
									"//       var jsonData = response.body;",
									"//       if (jsonData.length !== 0) {",
									"//           var firstClient = jsonData[0];",
									"//           firstClient.should.have.property(\"id\");",
									"//           firstClient.should.have.property(\"name\");",
									"//           firstClient.should.have.property(\"office_id\");",
									"//       }",
									"//   });",
									"// });",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients/{{current_client}}/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e3e6527-0cea-47c2-8121-75d03dc41dab",
								"type": "text/javascript",
								"exec": [
									"// //  Install postmanBDD",
									"// eval(globals.postmanBDD);",
									"",
									"// //  Test the authenticate response.",
									"// describe('Testing clients endpoint, valid authentication', function() {",
									"//   it('Response statusCode should be 200', function() {",
									"//      response.should.have.status(200);",
									"//   });",
									"//   it('Response header should have Content-Type of application/json', function() {",
									"//     response.should.have.header('content-type', 'application/json');",
									"//   });",
									"//   it('Response body be in JSON format', function() {",
									"//       response.should.be.json; ",
									"//   });",
									"//   it(\"Response should have 'id', 'name' and 'office_id' properties\", function() {",
									"//       var jsonData = response.body;",
									"//       if (jsonData.length !== 0) {",
									"//           var firstClient = jsonData[0];",
									"//           firstClient.should.have.property(\"id\");",
									"//           firstClient.should.have.property(\"name\");",
									"//           firstClient.should.have.property(\"office_id\");",
									"//       }",
									"//   });",
									"// });",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients/{{current_client}}/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2aa4ed6a-dfd0-4821-b81c-5b67f13303fc",
								"type": "text/javascript",
								"exec": [
									"// //  Install postmanBDD",
									"// eval(globals.postmanBDD);",
									"",
									"// //  Test the authenticate response.",
									"// describe('Testing clients endpoint, valid authentication', function() {",
									"//   it('Response statusCode should be 200', function() {",
									"//      response.should.have.status(200);",
									"//   });",
									"//   it('Response header should have Content-Type of application/json', function() {",
									"//     response.should.have.header('content-type', 'application/json');",
									"//   });",
									"//   it('Response body be in JSON format', function() {",
									"//       response.should.be.json; ",
									"//   });",
									"//   it(\"Response should have 'id', 'name' and 'office_id' properties\", function() {",
									"//       var jsonData = response.body;",
									"//       if (jsonData.length !== 0) {",
									"//           var firstClient = jsonData[0];",
									"//           firstClient.should.have.property(\"id\");",
									"//           firstClient.should.have.property(\"name\");",
									"//           firstClient.should.have.property(\"office_id\");",
									"//       }",
									"//   });",
									"// });",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\" : \"New Client from Postman\"\n}"
						},
						"url": {
							"raw": "{{url}}clients/",
							"host": [
								"{{url}}clients"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		}
	]
}