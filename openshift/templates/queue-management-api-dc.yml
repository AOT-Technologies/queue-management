---
kind: Template
apiVersion: v1
metadata:
  name: queue-management-api
parameters:
- name: API_NAME
  description: "Name of the flask application"
  required: true
  value: "queue-management-api"
- name: API_APPLICATION_DOMAIN
  description: "The exposed hostname that will route to the Flask service"
  required: true
  value: "servicebc-cfms-dev.pathfinder.gov.bc.ca"
- name: FLASK_CONFIGURATION
  description: "The configuration object that should be loaded for this deployment. Only development exists currently"
  required: true
  value: development
- name: API_IMAGE_TAG
  description: The tag to use when deploying
  required: true
  value: "dev"
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    annotations:
      description: "Exposes and load balances the api pods"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${API_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
  spec:
    host: "${API_APPLICATION_DOMAIN}"
    path: /api
    to:
      kind: Service
      name: "${API_NAME}"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    labels:
      app: queue-management
    annotations:
      description: "Defines how to deploy the application server"
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 60
        maxUnavailable: 1
        post:
          execNewPod:
            command:
              - python manage.py db upgrade
            containerName: queue-management-api
          failurePolicy: Abort
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames: 
          - "${API_NAME}"
        from:
          kind: ImageStreamTag
          namespace: servicebc-cfms-tools
          name: "${API_NAME}:${API_IMAGE_TAG}"
    - type: ConfigChange
    replicas: 3
    selector:
      name: "${API_NAME}"
    template:
      metadata:
        name: "${API_NAME}"
        labels:
          name: "${API_NAME}"
      spec:
        containers:
        - name: "${API_NAME}"
          image: ""
          ports:
          - containerPort: 8080
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 3
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 3
          env:
          - name: DATABASE_ENGINE
            value: "mysql"
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: "percona-passwords"
                key: mysql_user
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "percona-passwords"
                key: mysql_password
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: "percona-passwords"
                key: mysql_database
          - name: DATABASE_HOST
            value: "percona"
          - name: DATABASE_PORT
            value: "3306"
          - name: SQLALCHEMY_ECHO
            value: "False"
          - name: APP_CONFIG
            value: gunicorn_config.py
          - name: FLASK_CONFIGURATION
            value: "${FLASK_CONFIGURATION}"
          - name: APP_MODULE
            value: wsgi
          - name: ACTIVE_MQ_HOST
            value: rabbitmq
          - name: ACTIVE_MQ_PORT
            value: "5672"
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - mountPath: /opt/app-root/src/client_secrets
              name: oidc-secrets-o6ya6
              readOnly: true
        volumes:
          - configMap:
              defaultMode: 420
              name: oidc-secrets
            name: oidc-secrets-o6ya6
