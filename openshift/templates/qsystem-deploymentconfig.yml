---
kind: Template
apiVersion: v1
metadata:
  name: queue-management-api-deploymentconfig-template
parameters:
- name: API_NAME
  description: "Name of the flask application"
  value: "queue-management-api"
- name: API_APPLICATION_DOMAIN
  description: "The exposed hostname that will route to the Flask service"
  value: "servicebc-cfms-dev.pathfinder.gov.bc.ca"
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    annotations:
      description: "Exposes and load balances the api pods"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${API_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
  spec:
    host: "${API_APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${API_NAME}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    annotations:
      description: "Defines how to deploy the application server"
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    strategy:
      type: Rolling
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames: [ "${API_NAME}" ]
        from:
          kind: ImageStreamTag
          name: "${API_NAME}:latest"
    - type: ConfigChange
    replicas: 2
    selector:
      name: "${API_NAME}"
    template:
      metadata:
        name: "${API_NAME}"
        labels:
          name: "${API_NAME}"
      spec:
        nodeSelector:
          region: primary
        containers:
        - name: "${API_NAME}"
          image: ""
          ports:
          - containerPort: 8080
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 3
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 3
          env:
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: "postgresql-secrets"
                key: database-user
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "postgresql-secrets"
                key: database-password
          - name: DATABASE_NAME
            value: "queue-management-api"
          - name: DATABASE_HOST
            value: "postgresql"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi