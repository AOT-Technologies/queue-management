---
kind: Template
apiVersion: v1
metadata:
  name: queue-management-database
  annotations:
    description: OpenShift Postgres Queue Management Database
    iconClass: icon-python
    tags: 'database,postgresql'
parameters:
- description: 'The Postgresql image name from the Openshift namespace'
  displayName: PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: 'latest'
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: 'user[A-Z0-9]{3}'
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: "queue_management"
- description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: '${DATABASE_SERVICE_NAME}-secrets'
  stringData:
    database-name: '${POSTGRESQL_DATABASE}'
    database-password: '${POSTGRESQL_PASSWORD}'
    database-user: '${POSTGRESQL_USER}'
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: 'postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}'
    name: '${DATABASE_SERVICE_NAME}'
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: '${DATABASE_SERVICE_NAME}'
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: '${DATABASE_SERVICE_NAME}-data'
    annotations:
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${VOLUME_CAPACITY}'
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    labels:
      app: postgresql
      service: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      app: postgresql
      deploymentconfig: "${DATABASE_SERVICE_NAME}"
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: postgresql
          service: "${DATABASE_SERVICE_NAME}"
          deploymentconfig: "${DATABASE_SERVICE_NAME}"
          name: "${DATABASE_SERVICE_NAME}"
          template: postgresql
      spec:
        containers:
        - name: ${DATABASE_SERVICE_NAME}
          image: " "
          imagePullPolicy: Always
          env:
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}-secrets
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}-secrets
                key: database-password
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
          livenessProbe:
            failureThreshold: 30
            tcpSocket:
                port: 5432
            initialDelaySeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            tcpSocket:
                port: 5432
            initialDelaySeconds: 60
            timeoutSeconds: 3
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}-data"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
      strategy:
        type: Rolling
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "postgresql:${POSTGRESQL_VERSION}"
          namespace: "${NAMESPACE}"
