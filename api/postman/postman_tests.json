{
	"info": {
		"_postman_id": "9cabf3e8-3f9a-46e9-aad0-5eeb354d1a3e",
		"name": "Queue-Management API Tests Debug",
		"description": "Test the back end APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "baaf4f23-7e22-4309-b1c8-d0a9a7900749",
			"name": "Setup",
			"item": [
				{
					"_postman_id": "72f5f69f-a2f6-41f4-a001-442e0e5823ba",
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c9fd856-5ff7-4c5b-87c7-dc6d6167ac37",
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47e65f0f-09a2-4eda-a006-edfc894218b1",
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				},
				{
					"_postman_id": "3cdb31e6-aec2-4f3d-b5a8-c311507087a5",
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5409b66d-67a4-449b-8633-9aeca632b388",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token\", 0);\n\t    pm.environment.set(\"refresh_token\", 0);\n\t    pm.environment.set(\"token_expires\", 0);\n\t    pm.environment.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "ef8550e8-8717-46e6-a5b3-52db2683f869",
					"name": "CFMS-Install-Auth-NonQTxn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4115f4c-a05c-4de1-8020-da1181a82656",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first_nonqtxn\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid_nonqtxn\");\npassword = pm.environment.get(\"password_nonqtxn\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token_nonqtxn\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", 0);\n\t    pm.environment.set(\"token_expires_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_expires_nonqtxn\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "ac559758-c529-4f19-a5b1-930908c5e956",
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386cf22-bb0f-47d9-9c22-cda162ed4375",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "5ba781cf-8727-4194-acc2-b02780eb27ad",
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1d0ab5c-fe6b-4e6d-8778-417ae879cee1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.environment.set(\"token\", jsonData.access_token);\n      pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n      pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "7a1cd00b-94a4-40d2-8888-ead4f0074c2b",
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "365727f4-696d-4e44-a379-5eba3001641a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nrefresh_token = pm.environment.get(\"refresh_token\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "16eed77b-6b15-440c-8a50-cbe04cd8119f",
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d8e240-3b40-4654-a32b-bf2e676fdeb9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Basic response tests', function() {\n    it('Response time should be below 1000ms', function() {\n        pm.response.responseTime.should.be.below(1000);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "42cbf73a-8458-442b-93a5-d6a1cf78076d",
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f006b951-3205-4f21-a315-369f85591929",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Complex response tests', function() {\n    it('Response time should be below 25000ms', function() {\n        pm.response.responseTime.should.be.below(25000);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "ce52da1a-8d97-4f80-8b94-0a9c03ac0a0e",
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Create response tests', function() {\n    it('Response time should be below 20000ms', function() {\n        pm.response.responseTime.should.be.below(20000);\n    });\n    it('Response statusCode should be 201 CREATED', function() {\n        response.should.have.status(201);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "ac48d07e-5b8d-4863-ba83-959723cb221f",
					"name": "CFMS-Install-Citizen-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"citizen_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"start_time\" : {\n            \"type\" : \"string\"\n        },\n        \"citizen_name\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"number\", \"object\"]\n        },\n        \"qt_xn_citizen_ind\" : {\n            \"type\" : \"number\"\n        },\n        \"ticket_number\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"service_reqs\" : {\n            \"type\" : \"array\"\n        },\n        \"office_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"cs\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen_comments\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \n    },\n    \"required\" : [\"start_time\", \"citizen_name\", \"citizen_id\",\n                  \"qt_xn_citizen_ind\", \"ticket_number\", \"service_reqs\",\n                  \"office_id\", \"cs\", \"citizen_comments\"]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"citizens\")) {\n\tallElements = jsonData.citizens;\n};\n\nif (jsonData.hasOwnProperty(\"citizen\")) {\n\tallElements = [];\n\tallElements.push(jsonData.citizen);\n};\n\nvar elementCount = 0;\n\n//  If there are some citizens, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each channel, create list of citizen ids.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Citizen (\" + elementCount + \"): \" + element.citizen_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n\n        //  Test the authenticate response.\n        describe(\"--> \" + testTitle + \"fields have valid values\", function() {\n            it('qt_xn_citizen_ind must be 0 or 1', function() {\n                element.qt_xn_citizen_ind.should.be.within(0,1);\n            });\n        });\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "23aa60b4-5ac3-4247-a9da-0b8af3baafe4",
					"name": "CFMS-Install-Service-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6c4264-28b3-4a49-b6bb-1199aef2cb13",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"sr_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"sr_state\" : {\n            \"type\" : \"object\"\n        },\n        \"periods\" : {\n            \"type\" : \"array\"\n        },\n        \"service\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"quantity\" : {\n            \"type\" : \"number\"\n        },\n        \"service_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"channel\" : {\n        \t\"type\" : \"object\"\n        },\n        \"channel_id\" : {\n        \t\"type\" : [\"object\", \"number\"]\n        }\n        \n    },\n    \"required\" : [\n    \t\"sr_id\", \"sr_state\", \"periods\", \"service\", \"citizen\", \"quantity\",\n    \t\"service_id\", \"citizen_id\", \"channel\", \"channel_id\"\n    ]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"service_requests\")) {\n\tallElements = jsonData.service_requests;\n};\n\nif (jsonData.hasOwnProperty(\"service_request\")) {\n    allElements = [];\n\tallElements.push(jsonData.service_request);\n}\n\nvar elementCount = 0;\n\n//  If there are some service requests, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each service request.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Service Request (\" + elementCount + \"): \" + element.sr_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "386250b3-ab79-45bc-91eb-6daffc08fc87",
					"name": "CFMS-Install-Get-Active-Citizens-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8856712d-73ca-4172-89ba-590e8b015c6b",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"get_active_citizens_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Declare and initialize variables.\nvar elementCount = 0;\nvar srCount = 0;\nvar isFirstCitizen = true;\n\n\n//  Loop to create list of active citizen ids.\nallElements.forEach(function(element) {\n    srCount = element.service_reqs.length;\n\n    //  If citizen active, add to the list.\n    if (element.cs.cs_state_name === \"Active\") {\n        //console.log(\"Citizen (\" + elementCount + \") \" + element.citizen_id +\n        //    \" Active: SRCount = \" + srCount);\n        citizenIds.push(element.citizen_id);\n\n        //  Save the first citizen.\n        if (isFirstCitizen) {\n            currentCitizen = element;\n            isFirstCitizen = false;\n        }\n    }\n        \n    //  Increment count.\n    elementCount++;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features."
		},
		{
			"_postman_id": "86775a9f-93e3-4df3-9ae4-80995f2bb730",
			"name": "Check app health",
			"item": [
				{
					"_postman_id": "3ca3bcd6-9df1-4897-971a-bfe3d463c4c0",
					"name": "Check the healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application health', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d354d1e6-e2c7-479d-9e4c-f5309a73ad73",
					"name": "Check the readyz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "661c33c4-4a3d-4396-a549-9969edafbfa6",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application readiness', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is ready');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints"
		},
		{
			"_postman_id": "17de64ae-71be-495d-be83-dba73372e330",
			"name": "Check user login",
			"item": [
				{
					"_postman_id": "09c6bdf6-c05d-4d59-b358-209d47cfbc7e",
					"name": "Authenticate default QTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9ba8080-c323-42e4-8bdb-6c552d4d482b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"    it('Response time should be below 5000ms', function() {",
									"        pm.response.responseTime.should.be.below(5000);",
									"    });",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				},
				{
					"_postman_id": "6b608eec-e15f-4440-a546-882926799ec8",
					"name": "Authenticate NonQTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb3fda97-b9c4-44bb-96da-a04e82f3d850",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"    it('Response time should be below 5000ms', function() {",
									"        pm.response.responseTime.should.be.below(5000);",
									"    });",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token_nonqtxn\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token_nonqtxn\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires_nonqtxn\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires_nonqtxn\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid_nonqtxn}}&password={{password_nonqtxn}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "77b2de1c-20f9-43d0-9391-01c610334fe6",
			"name": "Check channels",
			"item": [
				{
					"_postman_id": "0ebdaec7-77ea-44f5-a79c-942f2ef9225b",
					"name": "Get channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fdb881ae-aeb4-4ec1-a005-95ded24f55b0",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec5e638f-76b0-4f24-8d93-458c1e2dba35",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"channel_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    \"required\" : [\"channel_name\", \"channel_id\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allChannels = jsonData.channels;",
									"var channelCount = 0;",
									"var phoneId = 0;",
									"allChannels.forEach(function(channel) {",
									"    channelCount ++;",
									"    var testTitle = \"Channel (\" + channelCount + \"): ID \" + channel.channel_id + \" Name \" + channel.channel_name + \" conforms to schema\";",
									"    tests[testTitle] = tv4.validate(channel, schema);",
									"    if (channel.channel_name === \"Telephone\") {",
									"        phoneId = channel.channel_id;",
									"    }",
									"    if (channel.channel_name === \"Email\") {",
									"        emailId = channel.channel_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the phone ID.",
									"describe(\"Found the two channel IDs\", function() {",
									"    it('Telephone id ' + phoneId + ' was found (not equal to 0)', function() {",
									"        phoneId.should.not.be.eql(0);",
									"    });",
									"    it('Email id ' + emailId + ' was found (not equal to 0)', function() {",
									"        emailId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store this ID for future use.",
									"postman.setEnvironmentVariable(\"channel_telephone_id\", JSON.stringify(phoneId));",
									"postman.setEnvironmentVariable(\"channel_email_id\", JSON.stringify(emailId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}channels/",
							"host": [
								"{{url}}channels"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "947881da-99fa-4422-be30-4bc2ad913f41",
			"name": "Check services",
			"item": [
				{
					"_postman_id": "626b3334-d6a1-4b4f-ad92-daa606436b84",
					"name": "Get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d01c3826-dc28-4cce-957b-ec70d0393e7e",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "348f3d58-18e9-4786-a28e-43ac6b0cc3be",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"number\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);",
									"    ",
									"    //  Test the authenticate response.",
									"    describe(\"--> \" + testTitle + \"fields have valid values\", function() {",
									"        it('display_dashboard_ind must be 0 or 1', function() {",
									"            element.display_dashboard_ind.should.be.within(0,1);",
									"        });",
									"        it('actual_service_ind for services must be 1', function() {",
									"            //  Test for only returning services.",
									"            element.actual_service_ind.should.be.eql(1);",
									"            //  Test for returning services and categories.",
									"            // element.actual_service_ind.should.be.within(0,1);",
									"        });",
									"        //  Test for only returning services",
									"        it('parent_id for categories must not be null', function() {",
									"            (element.parent_id === null).should.be.eql(false);",
									"        });",
									"    });",
									"//});",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === 'MSP') {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === \"Property Taxes\") {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found these IDs.",
									"describe(\"Found the MSP and Property Taxes IDs\", function() {",
									"    ",
									"    it('MSP id was found (was ' + mspId + ', not equal to 0)', function() {",
									"        mspId.should.not.be.eql(0);",
									"    });",
									"    it('Property Taxes id was found (was ' + taxId + ', not equal to 0)', function() {",
									"        taxId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "0fe4ee40-0b32-4163-8215-c5c11de8e583",
			"name": "Check token handling",
			"item": [
				{
					"_postman_id": "b0382901-74ad-4537-a403-f58287a1ba5d",
					"name": "Get client list no token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f94771e0-0fb1-46ac-8e92-398f05ab331f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8e0f729-56df-4623-9891-b900a0a06d8e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, no authentication', function() {",
									"  it('Response statusCode should be 401 UNAUTHORIZED', function() {",
									"     response.should.have.status(401);",
									"  });",
									"  it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"  });",
									"  it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"  });",
									"  it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"      //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"      var jsonData = JSON.parse(response.body);",
									"      jsonData.should.have.property(\"error\");",
									"      jsonData.should.have.property(\"error_description\");",
									"  });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "a98aa174-e639-4af4-b28d-d7c70ea00ae3",
					"name": "Get client list invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ffd34b9-5a4b-4ec6-a9b6-05bf2afef3c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cef61b0-08bf-44fc-b90d-8f9643f67896",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, invalid authentication', function() {",
									"   it('Response statusCode should be 401 UNAUTHORIZED', function() {",
									"     response.should.have.status(401);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"       //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"       var jsonData = JSON.parse(response.body);",
									"       jsonData.should.have.property(\"error\");",
									"       jsonData.should.have.property(\"error_description\");",
									"   });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer andDUF9sV18wd1V2b1NzV3F6NVFtRlFFIn0.eyJqdGkiOiIzMWU0M2E4"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "59583c90-d4a8-40d0-82db-fc6c7350cf22",
					"name": "Get client list valid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad06e274-f574-45d3-8522-d93fdfcd31f3",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dde1b21d-05a7-493a-837e-f230731b0b8d",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Delete all but two of the citizens.",
									"while (jsonData.citizens.length > 2) {",
									"    jsonData.citizens.pop();",
									"}",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "4159d8f2-730b-4080-be2a-43effe54ec41",
			"name": "Clear queue for tests",
			"item": [
				{
					"_postman_id": "30c706e9-38ee-4f5e-872a-a0f149540536",
					"name": "Delete citizen queue driver",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f6d8d4e-e4fe-451f-a5d9-119fcefcd527",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27f63d12-7c7c-42e1-9647-85480ee17cb8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Delete citizens, if there are any.",
									"    if (citizenIds.length > 0) {",
									"        ",
									"        //  Set the current_client, to be deleted.",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"    ",
									"        if (currentCitizen.service_reqs.length === 0) {",
									"            postman.setNextRequest(\"Next citizen left\");",
									"            // //  Temporary kludge.  Citizen left not working, so add SR, then delete.",
									"            // postman.setNextRequest(\"Temporary add MSP service request\");",
									"        }",
									"        else {",
									"            postman.setNextRequest(\"Next citizen finish service\");",
									"        }",
									"    }",
									"    ",
									"    //  No more citizens.  Clear the current, queue variables.",
									"    else {",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(\"\"));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(\"\"));",
									"        postman.setNextRequest(\"End clear queue via healthz endpoint\");",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "7186bdab-986e-47ba-80a0-60de98c4b9d2",
					"name": "Next citizen finish service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e516a2b7-0555-43b5-8058-ccd92b5b6e95",
								"type": "text/javascript",
								"exec": [
									"// Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"// Ensure citizen to be deleted was citizen actually deleted.",
									"//var citizenIds = JSON.parse(postman.getEnvironmentVariable(\"current_queue\"));",
									"",
									"var citizenToBeDeleted = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"var citizenData = jsonData.citizen;",
									"var testTitle = \"Check citizen finish service\";",
									"",
									"//  Test the authenticate response.",
									"describe(testTitle, function() {",
									"    it('Response should have property \"citizen\"', function() {",
									"        jsonData.hasOwnProperty(\"citizen\").should.equal(true);",
									"    });",
									"    it('Response should not have have property \"message\" indicating an error', function() {",
									"        jsonData.hasOwnProperty(\"message\").should.equal(false);",
									"    });",
									"    it('Citizen marked as finished should be citizen ' + citizenToBeDeleted, function() {",
									"        citizenData.citizen_id.should.eql(citizenToBeDeleted);",
									"    });",
									"});",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "f7fc5c99-ac12-471c-b357-b736c52cec8a",
					"name": "Next citizen citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6caff547-493f-4f0d-a121-f8e3398f11c3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen left\", function() {",
									"        it('Must be only one citizen that left', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"    });",
									"}",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "def0c5c5-3033-4c3c-8db4-efc3807a7855",
					"name": "Temporary add MSP service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2ec515b-209f-4d91-81c1-c72a14600685",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run create tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"var svcReq = jsonData.service_request;",
									"",
									"console.log(svcReq);",
									"",
									"//  Set schema of the service_request property.",
									"var schema = {",
									"    \"properties\" : {",
									"        \"periods\" : {",
									"            \"type\" : \"array\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"sr_state\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"quantity\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"sr_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"citizen\" : {",
									"            \"type\" :[\"number\", \"object\"]",
									"        },",
									"        \"citizen_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"channel\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    // \"required\" : [\"periods\", \"service_id\", \"sr_state_id\", \"service\"]",
									"    \"required\" : [\"periods\", \"service_id\", \"service\", \"sr_state\", \"quantity\", \"sr_id\",",
									"                  \"citizen\", \"citizen_id\", \"channel\", \"channel_id\"]",
									"};",
									"",
									"//  Check the result.",
									"describe(\"Response schema is correct\", function() {",
									"    it('service_request property present', function() {",
									"        jsonData.should.have.property(\"service_request\");",
									"    });",
									"    it('errors property present', function() {",
									"        jsonData.should.have.property(\"errors\");",
									"    });",
									"    tests[\"service_request property has correct schema\"] = tv4.validate(svcReq, schema);",
									"});",
									"",
									"//  Go back to the clear citizen driver.",
									"postman.setNextRequest(\"Next citizen finish service\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : 1,\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "49cca2ec-9992-49e3-bfbe-78239006d162",
					"name": "End clear queue via healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application health', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "74175300-bc9f-4490-82f0-377a691e5886",
			"name": "Check citizen through queue",
			"item": [
				{
					"_postman_id": "6032fc45-2da0-4850-9fd1-2ea1a475a486",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f95832a-57ef-4dcf-bdfe-916d2eb5d006",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "e085b4dc-5084-459a-88c0-6c1b08d37ae9",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7896261d-7d88-4eba-860b-98472655c4a7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "0dec6291-d702-4059-814a-8b0721facb7c",
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b72e7756-5de1-4a13-9609-8917ea63dee7",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "20d6aa15-6b31-42fa-ae6a-decf7b7de568",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"// //  If there are some citizens, proceed with tests.",
									"// if (allElements !== null) {",
									"",
									"//     //  Run citizen tests.",
									"//     eval(environment.get_active_citizens_test);",
									"    ",
									"//     //  Get environment variables.",
									"//     var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"//     var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"//     //  Perform tests.",
									"//     describe(\"Check for correct citizen updates\", function() {",
									"//         it('Must be one active citizen in the office', function() {",
									"//             citizenIds.length.should.be.eql(1);",
									"//         });",
									"//         it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"//             (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"//         });",
									"//         it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"//             (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"//         });",
									"//         it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"//             (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"//         });",
									"//         it('service_reqs must empty (no service requests)', function() {",
									"//             (currentCitizen.service_reqs.length).should.be.eql(0);",
									"//         });",
									"//     });",
									"// }"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "ea750682-7dbb-418e-9d76-490617e02409",
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "11abc0e0-71ae-4e84-95c6-c74871557e2c",
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66ca9683-be00-478b-92c0-6ac698d9088b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "9a1e8d56-49ae-412c-8677-e896e6dab6ac",
					"name": "Add citizen to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a294876-edfa-4d5b-ada4-399f5339cd8f",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "2e978443-fffb-442a-ab84-df3f65628fcb",
					"name": "Invite specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7884b553-77a8-46e6-a1de-d8bee02ca6ff",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "bdf64728-d403-4858-a9b5-856dc2969e6b",
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b1f7f66-04cd-4f10-bfa2-c4f3fffe8715",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "6b9d9433-ae10-4815-bc19-811f596a48b2",
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "717581c1-04ab-4b48-b3b5-75ca3ccda53e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		}
	]
}