{
	"info": {
		"_postman_id": "4b52746f-404b-42fb-b245-2e2ef396b2bb",
		"name": "Queue-Management API Tests",
		"description": "Test the back end APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "952428b3-14e0-4a78-8ff4-88a2488ea2e7",
			"name": "Setup",
			"item": [
				{
					"_postman_id": "ad17c16a-12df-4540-aba7-40783cb76cb5",
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c9fd856-5ff7-4c5b-87c7-dc6d6167ac37",
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47e65f0f-09a2-4eda-a006-edfc894218b1",
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				},
				{
					"_postman_id": "a2717d56-b56f-4b38-8e1b-6ffbc2a404fd",
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5409b66d-67a4-449b-8633-9aeca632b388",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token\", 0);\n\t    pm.environment.set(\"refresh_token\", 0);\n\t    pm.environment.set(\"token_expires\", 0);\n\t    pm.environment.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "dacca6f4-c8a6-4b2a-890f-21930cffe810",
					"name": "CFMS-Install-Auth-NonQTxn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4115f4c-a05c-4de1-8020-da1181a82656",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first_nonqtxn\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid_nonqtxn\");\npassword = pm.environment.get(\"password_nonqtxn\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.environment.set(\"token_nonqtxn\", jsonData.access_token);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.environment.set(\"token_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_nonqtxn\", 0);\n\t    pm.environment.set(\"token_expires_nonqtxn\", 0);\n\t    pm.environment.set(\"refresh_token_expires_nonqtxn\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "9b5b1281-0730-4e2f-8f61-2fa3cc188ee0",
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386cf22-bb0f-47d9-9c22-cda162ed4375",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "1fca2095-0bc2-4498-a230-9ddffe39249c",
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1d0ab5c-fe6b-4e6d-8778-417ae879cee1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.environment.set(\"token\", jsonData.access_token);\n      pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n      pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "40ed46b4-fcea-478f-a1ab-cfc38b8d6dba",
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "365727f4-696d-4e44-a379-5eba3001641a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = pm.environment.get(\"auth_url\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nrefresh_token = pm.environment.get(\"refresh_token\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "bb34df64-5199-4c00-ae1e-562d0df805d1",
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d8e240-3b40-4654-a32b-bf2e676fdeb9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Basic response tests', function() {\n    it('Response time should be below 1000ms', function() {\n        pm.response.responseTime.should.be.below(1000);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "b64654c7-e90b-4921-b3c9-8c7e4c745786",
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f006b951-3205-4f21-a315-369f85591929",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Complex response tests', function() {\n    it('Response time should be below 25000ms', function() {\n        pm.response.responseTime.should.be.below(25000);\n    });\n    it('Response statusCode should be 200 OK', function() {\n        response.should.have.status(200);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "3a371dcf-1668-44c9-b94c-5ad3bbdaa1d3",
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382b7b65-d736-4a03-a44a-3891f33b617d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Test the authenticate response.\ndescribe('Create response tests', function() {\n    it('Response time should be below 20000ms', function() {\n        pm.response.responseTime.should.be.below(20000);\n    });\n    it('Response statusCode should be 201 CREATED', function() {\n        response.should.have.status(201);\n    });\n    it('Response header should have Content-Type of application/json', function() {\n        response.should.have.header('content-type', 'application/json');\n    });\n    it('Response body be in JSON format', function() {\n        response.should.be.json; \n    });\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "0baeb631-9703-4369-bee5-4a04856f8041",
					"name": "CFMS-Install-Citizen-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cebcf78-f5a2-4694-b108-60e146791a78",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"citizen_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"start_time\" : {\n            \"type\" : \"string\"\n        },\n        \"citizen_name\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"number\", \"object\"]\n        },\n        \"qt_xn_citizen_ind\" : {\n            \"type\" : \"number\"\n        },\n        \"ticket_number\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \"service_reqs\" : {\n            \"type\" : \"array\"\n        },\n        \"office_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"cs\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen_comments\" : {\n            \"type\" : [\"string\", \"null\"]\n        },\n        \n    },\n    \"required\" : [\"start_time\", \"citizen_name\", \"citizen_id\",\n                  \"qt_xn_citizen_ind\", \"ticket_number\", \"service_reqs\",\n                  \"office_id\", \"cs\", \"citizen_comments\"]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"citizens\")) {\n\tallElements = jsonData.citizens;\n};\n\nif (jsonData.hasOwnProperty(\"citizen\")) {\n\tallElements = [];\n\tallElements.push(jsonData.citizen);\n};\n\nvar elementCount = 0;\n\n//  If there are some citizens, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each channel, create list of citizen ids.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Citizen (\" + elementCount + \"): \" + element.citizen_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n\n        //  Test the authenticate response.\n        describe(\"--> \" + testTitle + \"fields have valid values\", function() {\n            it('qt_xn_citizen_ind must be 0 or 1', function() {\n                element.qt_xn_citizen_ind.should.be.within(0,1);\n            });\n        });\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "475211a8-8bed-4c4b-8e4a-98acd5493615",
					"name": "CFMS-Install-Service-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6c4264-28b3-4a49-b6bb-1199aef2cb13",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_response_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"sr_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"sr_state\" : {\n            \"type\" : \"object\"\n        },\n        \"periods\" : {\n            \"type\" : \"array\"\n        },\n        \"service\" : {\n            \"type\" : \"object\"\n        },\n        \"citizen\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"quantity\" : {\n            \"type\" : \"number\"\n        },\n        \"service_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"citizen_id\" : {\n            \"type\" : [\"object\", \"number\"]\n        },\n        \"channel\" : {\n        \t\"type\" : \"object\"\n        },\n        \"channel_id\" : {\n        \t\"type\" : [\"object\", \"number\"]\n        }\n        \n    },\n    \"required\" : [\n    \t\"sr_id\", \"sr_state\", \"periods\", \"service\", \"citizen\", \"quantity\",\n    \t\"service_id\", \"citizen_id\", \"channel\", \"channel_id\"\n    ]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"service_requests\")) {\n\tallElements = jsonData.service_requests;\n};\n\nif (jsonData.hasOwnProperty(\"service_request\")) {\n    allElements = [];\n\tallElements.push(jsonData.service_request);\n}\n\nvar elementCount = 0;\n\n//  If there are some service requests, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each service request.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Service Request (\" + elementCount + \"): \" + element.sr_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"_postman_id": "07dc0084-69e1-48e2-8784-07a1773a42d8",
					"name": "CFMS-Install-Get-Active-Citizens-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8856712d-73ca-4172-89ba-590e8b015c6b",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"get_active_citizens_test\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Declare and initialize variables.\nvar elementCount = 0;\nvar srCount = 0;\nvar isFirstCitizen = true;\n\n\n//  Loop to create list of active citizen ids.\nallElements.forEach(function(element) {\n    srCount = element.service_reqs.length;\n\n    //  If citizen active, add to the list.\n    if (element.cs.cs_state_name === \"Active\") {\n        //console.log(\"Citizen (\" + elementCount + \") \" + element.citizen_id +\n        //    \" Active: SRCount = \" + srCount);\n        citizenIds.push(element.citizen_id);\n\n        //  Save the first citizen.\n        if (isFirstCitizen) {\n            currentCitizen = element;\n            isFirstCitizen = false;\n        }\n    }\n        \n    //  Increment count.\n    elementCount++;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features."
		},
		{
			"_postman_id": "420b2f14-c4c1-4eb7-b213-ef43ee14c5c2",
			"name": "Check app health",
			"item": [
				{
					"_postman_id": "74adbf2b-8694-46b8-9ec2-fac61b852229",
					"name": "Check the healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application health', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c7446948-e81a-4cf3-9c3b-bdfa29c063f2",
					"name": "Check the readyz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "661c33c4-4a3d-4396-a549-9969edafbfa6",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application readiness', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is ready');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints"
		},
		{
			"_postman_id": "c6a64d78-233c-4a1f-b39b-9ec3f7943163",
			"name": "Check user login",
			"item": [
				{
					"_postman_id": "045e73fc-a66f-4d7a-9cb6-9c2882b30dd6",
					"name": "Authenticate default QTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9ba8080-c323-42e4-8bdb-6c552d4d482b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"    it('Response time should be below 5000ms', function() {",
									"        pm.response.responseTime.should.be.below(5000);",
									"    });",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				},
				{
					"_postman_id": "1412768e-81d7-49fd-9608-d6b3e48fa19b",
					"name": "Authenticate NonQTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb3fda97-b9c4-44bb-96da-a04e82f3d850",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing authentication ' + pm.environment.get(\"userid\"), function() {",
									"    it('Response time should be below 5000ms', function() {",
									"        pm.response.responseTime.should.be.below(5000);",
									"    });",
									"   it('Response statusCode should be 200', function() {",
									"     response.should.have.status(200);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have expected properties\", function() {",
									"       var jsonData = response.body;",
									"       jsonData.should.have.property('access_token');",
									"       jsonData.should.have.property('refresh_token');",
									"       jsonData.should.have.property('expires_in');",
									"       jsonData.should.have.property('refresh_expires_in');",
									"   });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token_nonqtxn\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token_nonqtxn\", jsonData.refresh_token);",
									"pm.environment.set(\"token_expires_nonqtxn\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires_nonqtxn\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid_nonqtxn}}&password={{password_nonqtxn}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "49133307-d581-41a5-89fc-4bc9f91ebbe0",
			"name": "Check channels",
			"item": [
				{
					"_postman_id": "278df08a-784f-4811-afe6-8b571c0242ed",
					"name": "Get channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fdb881ae-aeb4-4ec1-a005-95ded24f55b0",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec5e638f-76b0-4f24-8d93-458c1e2dba35",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"channel_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    \"required\" : [\"channel_name\", \"channel_id\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allChannels = jsonData.channels;",
									"var channelCount = 0;",
									"var phoneId = 0;",
									"allChannels.forEach(function(channel) {",
									"    channelCount ++;",
									"    var testTitle = \"Channel (\" + channelCount + \"): ID \" + channel.channel_id + \" Name \" + channel.channel_name + \" conforms to schema\";",
									"    tests[testTitle] = tv4.validate(channel, schema);",
									"    if (channel.channel_name === \"Telephone\") {",
									"        phoneId = channel.channel_id;",
									"    }",
									"    if (channel.channel_name === \"Email\") {",
									"        emailId = channel.channel_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the phone ID.",
									"describe(\"Found the two channel IDs\", function() {",
									"    it('Telephone id ' + phoneId + ' was found (not equal to 0)', function() {",
									"        phoneId.should.not.be.eql(0);",
									"    });",
									"    it('Email id ' + emailId + ' was found (not equal to 0)', function() {",
									"        emailId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store this ID for future use.",
									"postman.setEnvironmentVariable(\"channel_telephone_id\", JSON.stringify(phoneId));",
									"postman.setEnvironmentVariable(\"channel_email_id\", JSON.stringify(emailId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}channels/",
							"host": [
								"{{url}}channels"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "793acb7f-2061-42ab-bc54-f33189a1f386",
			"name": "Check categories",
			"item": [
				{
					"_postman_id": "6ea72a8a-5e40-4360-9d04-fddbc8c682cb",
					"name": "Get categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e99f23ee-5a03-43d9-9075-75dbf06aadcc",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1a9c9ff5-8475-4dd2-a6c7-ffb5d4689145",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allCategories = jsonData.categories;",
									"var categoryCount = 0;",
									"allCategories.forEach(function(category) {",
									"    categoryCount ++;",
									"    var testTitle = \"Category (\" + categoryCount + \"): \" + category.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(category, schema);",
									"    ",
									"    //  Test the authenticate response.",
									"    describe(\"--> \" + testTitle + \"fields have valid values\", function() {",
									"        it('display_dashboard_ind must be 0', function() {",
									"            category.display_dashboard_ind.should.be.eql(0);",
									"        });",
									"        it('actual_service_ind for categories must be 0', function() {",
									"            category.actual_service_ind.should.be.eql(0);",
									"        });",
									"        it('parent_id for categories must be null', function() {",
									"            (category.parent_id === null).should.be.eql(true);",
									"        });",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}categories/",
							"host": [
								"{{url}}categories"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "57defd51-6a3c-4542-a471-f1f56752f421",
			"name": "Check services",
			"item": [
				{
					"_postman_id": "4fb8ecbb-6915-4bcc-87ba-82117a508d77",
					"name": "Get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d01c3826-dc28-4cce-957b-ec70d0393e7e",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "348f3d58-18e9-4786-a28e-43ac6b0cc3be",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"display_dashboard_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"deleted\" : {",
									"            \"type\" : [\"object\", \"null\"]",
									"        },",
									"        \"actual_service_ind\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service_code\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"prefix\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"service_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"parent_id\" : {",
									"            \"type\" : [\"object\", \"number\", \"null\" ]",
									"        },",
									"        \"service_desc\" : {",
									"            \"type\" : \"string\"",
									"        }",
									"    },",
									"    \"required\" : [\"display_dashboard_ind\", \"deleted\", \"actual_service_ind\", \"service_id\", \"service_code\",",
									"                  \"prefix\", \"service_name\", \"parent_id\", \"service_desc\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);",
									"    ",
									"    //  Test the authenticate response.",
									"    describe(\"--> \" + testTitle + \"fields have valid values\", function() {",
									"        it('display_dashboard_ind must be 0 or 1', function() {",
									"            element.display_dashboard_ind.should.be.within(0,1);",
									"        });",
									"        it('actual_service_ind for services must be 1', function() {",
									"            //  Test for only returning services.",
									"            element.actual_service_ind.should.be.eql(1);",
									"            //  Test for returning services and categories.",
									"            // element.actual_service_ind.should.be.within(0,1);",
									"        });",
									"        //  Test for only returning services",
									"        it('parent_id for categories must not be null', function() {",
									"            (element.parent_id === null).should.be.eql(false);",
									"        });",
									"    });",
									"//});",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === 'MSP') {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === \"Property Taxes\") {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found these IDs.",
									"describe(\"Found the MSP and Property Taxes IDs\", function() {",
									"    ",
									"    it('MSP id was found (was ' + mspId + ', not equal to 0)', function() {",
									"        mspId.should.not.be.eql(0);",
									"    });",
									"    it('Property Taxes id was found (was ' + taxId + ', not equal to 0)', function() {",
									"        taxId.should.not.be.eql(0);",
									"    });",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "3ada515f-3d9f-46a6-98bf-edd215a81735",
			"name": "Check token handling",
			"item": [
				{
					"_postman_id": "2aa976f0-c4a7-4e7c-884f-36108f867a7e",
					"name": "Get client list no token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f94771e0-0fb1-46ac-8e92-398f05ab331f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8e0f729-56df-4623-9891-b900a0a06d8e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, no authentication', function() {",
									"  it('Response statusCode should be 401 UNAUTHORIZED', function() {",
									"     response.should.have.status(401);",
									"  });",
									"  it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"  });",
									"  it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"  });",
									"  it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"      //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"      var jsonData = JSON.parse(response.body);",
									"      jsonData.should.have.property(\"error\");",
									"      jsonData.should.have.property(\"error_description\");",
									"  });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "963d9683-e0ef-405a-9799-0165d82b115a",
					"name": "Get client list invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ffd34b9-5a4b-4ec6-a9b6-05bf2afef3c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cef61b0-08bf-44fc-b90d-8f9643f67896",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing clients endpoint, invalid authentication', function() {",
									"   it('Response statusCode should be 401 UNAUTHORIZED', function() {",
									"     response.should.have.status(401);",
									"   });",
									"   it('Response header should have Content-Type of application/json', function() {",
									"    response.should.have.header('content-type', 'application/json');",
									"   });",
									"   it('Response body be in JSON format', function() {",
									"      response.should.be.json; ",
									"   });",
									"   it(\"Response should have 'error' and 'error_description' properties\", function() {",
									"       //var jsonData = pm.response.replaceAll(\"^\\\"|\\\"$\",\"\").replace(\"\\\\\\\"\", \"\\\"\").json();",
									"       var jsonData = JSON.parse(response.body);",
									"       jsonData.should.have.property(\"error\");",
									"       jsonData.should.have.property(\"error_description\");",
									"   });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer andDUF9sV18wd1V2b1NzV3F6NVFtRlFFIn0.eyJqdGkiOiIzMWU0M2E4"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "4e2a96ca-2eb6-4af3-85da-6960aa621947",
					"name": "Get client list valid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad06e274-f574-45d3-8522-d93fdfcd31f3",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dde1b21d-05a7-493a-837e-f230731b0b8d",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Delete all but two of the citizens.",
									"while (jsonData.citizens.length > 2) {",
									"    jsonData.citizens.pop();",
									"}",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "6914e47b-be6b-4c0c-9e31-2eb4b697da34",
			"name": "Clear queue for tests",
			"item": [
				{
					"_postman_id": "3d8abc32-d599-4482-b754-f008f7b2e558",
					"name": "Delete citizen queue driver",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f6d8d4e-e4fe-451f-a5d9-119fcefcd527",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ae97852-f223-40e5-bb25-12daa7866f6b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Delete citizens, if there are any.",
									"    if (citizenIds.length > 0) {",
									"        ",
									"        //  Set the current_client, to be deleted.",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"    ",
									"        if (currentCitizen.service_reqs.length === 0) {",
									"            console.log(\"Current citizen \" + currentCitizen.citizen_id + \" has no service requests\");",
									"            //postman.setNextRequest(\"Next citizen left\");",
									"            //  Temporary kludge.  Citizen left not working, so add SR, then delete.",
									"            postman.setNextRequest(\"Temporary add MSP service request\");",
									"        }",
									"    ",
									"        else {",
									"            console.log(\"Current citizen \" + currentCitizen.citizen_id + \" has \" +",
									"                currentCitizen.service_reqs.length + \"  service request(s)\");",
									"            postman.setNextRequest(\"Next citizen finish service\");",
									"        }",
									"    }",
									"    ",
									"    //  No more citizens.  Clear the current, queue variables.",
									"    else {",
									"        console.log(\"Citizen queue is empty\");",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(\"\"));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(\"\"));",
									"        postman.setNextRequest(\"End clear queue via healthz endpoint\");",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "9d0086b6-9077-4b86-97e0-7addcd9c1fe6",
					"name": "Next citizen finish service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e516a2b7-0555-43b5-8058-ccd92b5b6e95",
								"type": "text/javascript",
								"exec": [
									"// Install postmanBDD",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"// Ensure citizen to be deleted was citizen actually deleted.",
									"//var citizenIds = JSON.parse(postman.getEnvironmentVariable(\"current_queue\"));",
									"",
									"var citizenToBeDeleted = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"var citizenData = jsonData.citizen;",
									"var testTitle = \"Check citizen finish service\";",
									"",
									"//  Test the authenticate response.",
									"describe(testTitle, function() {",
									"    it('Response should have property \"citizen\"', function() {",
									"        jsonData.hasOwnProperty(\"citizen\").should.equal(true);",
									"    });",
									"    it('Response should not have have property \"message\" indicating an error', function() {",
									"        jsonData.hasOwnProperty(\"message\").should.equal(false);",
									"    });",
									"    it('Citizen marked as finished should be citizen ' + citizenToBeDeleted, function() {",
									"        citizenData.citizen_id.should.eql(citizenToBeDeleted);",
									"    });",
									"});",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "36b34f7d-8619-4276-94c5-b125cd82ca12",
					"name": "Next citizen citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6caff547-493f-4f0d-a121-f8e3398f11c3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen left\", function() {",
									"        it('Must be only one citizen that left', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"    });",
									"}",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "0b70987c-6161-40d6-b050-62fabd180c5b",
					"name": "Temporary add MSP service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2ec515b-209f-4d91-81c1-c72a14600685",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run create tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"var svcReq = jsonData.service_request;",
									"",
									"console.log(svcReq);",
									"",
									"//  Set schema of the service_request property.",
									"var schema = {",
									"    \"properties\" : {",
									"        \"periods\" : {",
									"            \"type\" : \"array\"",
									"        },",
									"        \"service_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"service\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"sr_state\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"quantity\" : {",
									"            \"type\" : \"number\"",
									"        },",
									"        \"sr_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"citizen\" : {",
									"            \"type\" :[\"number\", \"object\"]",
									"        },",
									"        \"citizen_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        },",
									"        \"channel\" : {",
									"            \"type\" : \"object\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    // \"required\" : [\"periods\", \"service_id\", \"sr_state_id\", \"service\"]",
									"    \"required\" : [\"periods\", \"service_id\", \"service\", \"sr_state\", \"quantity\", \"sr_id\",",
									"                  \"citizen\", \"citizen_id\", \"channel\", \"channel_id\"]",
									"};",
									"",
									"//  Check the result.",
									"describe(\"Response schema is correct\", function() {",
									"    it('service_request property present', function() {",
									"        jsonData.should.have.property(\"service_request\");",
									"    });",
									"    it('errors property present', function() {",
									"        jsonData.should.have.property(\"errors\");",
									"    });",
									"    tests[\"service_request property has correct schema\"] = tv4.validate(svcReq, schema);",
									"});",
									"",
									"//  Go back to the clear citizen driver.",
									"postman.setNextRequest(\"Next citizen finish service\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : 1,\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "70f6bf86-cb82-494c-a04c-94776b988ac6",
					"name": "End clear queue via healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74adc5ce-caa5-452a-bd96-8ac90a4c11d7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD",
									"eval(globals.postmanBDD);",
									"",
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Test the authenticate response.",
									"describe('Testing application health', function() {",
									"    it(\"Response should have 'message' property\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.should.have.property('message');",
									"    });",
									"    it(\"Response message should be 'api is healthy'\", function() {",
									"        var jsonData = response.body;",
									"        jsonData.message.should.equal('api is healthy');",
									"    });",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e00b481-ef9a-440b-8e83-025fc49026c4",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "748a414d-7c6c-4629-a795-f18fdecb9079",
			"name": "Check citizen through queue",
			"item": [
				{
					"_postman_id": "a3faaf1d-9038-4c45-9e02-45673fcffc31",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f95832a-57ef-4dcf-bdfe-916d2eb5d006",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "0c599563-61a0-4297-b2c5-71fce7885f6d",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7896261d-7d88-4eba-860b-98472655c4a7",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "8660cc3d-10f9-4494-893b-e25dd3428961",
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5c9709-886d-4de4-ba32-d608cbdd2a23",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"}",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "42e2f2d3-3f1f-4d20-a70c-66c747847024",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "985cf350-2df4-460c-bb60-a7230d9f840b",
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "bdc7ce3d-ab65-48e4-b982-f73a44039c53",
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea616132-f547-4bf6-97c2-cfd6344116b4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "36a079ee-72dd-44e8-ac75-0d7d2736d623",
					"name": "Add citizen to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6f45f3b6-ff05-42f1-ba92-b52e2483b654",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c153fb90-4713-4dad-ae95-fcc5149c9054",
					"name": "Invite specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0637dd27-7f6b-4648-8852-3dc5a2a26610",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "5de0dcd7-d4dc-49b5-be13-716710191ef4",
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63ec5076-6d06-4808-be2f-00aafcb37f52",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "2570a50d-55e8-4b1a-871f-2a53d523583c",
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e89fa5c0-e21c-4c9c-826e-7e57f7e9adc3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "f1d000f7-d79b-42c5-bdba-726545e10405",
			"name": "Check citizen begin-hold-finish",
			"item": [
				{
					"_postman_id": "1974b48d-1f0d-4ee4-b985-f62cc130f9da",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d9d9302-3b15-49f0-8bb2-3de1f4d134b8",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "064571e3-6396-4283-987f-74a7d87457cf",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e77d15de-91e2-4528-87bd-5734405b4def",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "acf9a6bd-8ed7-41e8-9d57-c66741fda887",
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5c9709-886d-4de4-ba32-d608cbdd2a23",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"}",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38819cbb-3af9-45e1-99e7-89da8cfdec74",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen information applied\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "da29077f-04a1-46e9-a47c-4c994b310dc9",
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "b0583aec-cb4a-40aa-9c83-b1d8645a7c8b",
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6981b2c-07d0-4eaf-84fb-ed6d3b188f39",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service applied\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c5820e68-e8cf-4d09-94bb-e3bde99bc7c9",
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b0564b3-3345-49be-b6c8-bbde838197b2",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for begin serving citizen\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "fc3d92d9-0ed5-409c-8347-0a2e77b0df42",
					"name": "Place citizen on hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4f717059-b63d-4a2d-bfc7-635dc365fef8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen on hold\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"On hold\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"On hold\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/place_on_hold/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"place_on_hold",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "32af5115-3362-4436-87c3-54974e394cd6",
					"name": "Get service requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7a6d6a2-beb1-43ca-98c7-32c22adb700c",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get periods for the first service request.",
									"    var allPeriods = allElements[0].periods;",
									"    console.log(\"Number of periods: \" + allPeriods.length);",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    var allPeriodCount = 0;",
									"",
									"    //  Find how many periods there are with null end time.",
									"    //  Also, check schema.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        ",
									"        //  Debug.",
									"        console.log(onePeriod);",
									"        ",
									"        //  Find the open period.",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"        ",
									"        //  Check the schema.  Not working for now.",
									"        //allPeriodCount++;",
									"        //var testTitle = \"Period (\" + allPeriodCount + \"): \" + onePeriod.ps.ps_number + \" - \";",
									"        // tests[testTitle + \"conforms to schema\"] = tv4.validate(onePeriod, schema);",
									"        //tests[testTitle + \"conforms to schema\"] = onePeriod.hasOwnProperty(\"accurate_time_ind\");",
									"    });",
									"}    ",
									"",
									"//  If there are some service requests, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (allElements.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (allElements[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"On hold\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"On hold\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/service_requests/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"service_requests",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "88982a82-9862-4ba9-81fd-29b9703615cc",
					"name": "Call citizen from hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "801ba203-d619-487c-9297-31d02299d6eb",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for call citizen from hold\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "e3bffee0-56db-41d9-b89d-2ce09a1453ef",
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7dc8bcad-7255-4f74-ae76-2ffe22d15dd9",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    console.log(allElements);",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = allElements[0].service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen finished correctly\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (allElements[0].service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (allElements[0].service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "361d5ba4-e05c-4f57-8778-b92d8af06b91",
			"name": "Check citizen leave after create",
			"item": [
				{
					"_postman_id": "d727ed3b-53ad-47fe-a250-43d564f7ba02",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6cb5de42-277f-4c2d-b5ef-64b0f514d5bd",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "0d525810-ca2d-46e1-9bc4-5af943a27123",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "061a479c-37b4-4707-b8c6-c31cacadecec",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "8067ed3a-b773-4007-8dd2-766fa5571467",
					"name": "Citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16eaefc2-0d16-405e-9e70-e85314da841b",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = null;",
									"    if (currentCitizen.service_reqs.length !== 0) {",
									"        var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    }",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    if (allPeriods !== null) {",
									"        allPeriods.forEach(function(onePeriod) {",
									"            if (!onePeriod.time_end) {",
									"                openPeriod = onePeriod;",
									"                openPeriodCount++;",
									"            }",
									"        });",
									"    }",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('service_reqs length must be 0 (no service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "d05ce944-9368-46f4-95d2-c30bc4162592",
			"name": "Check citizen leave after waiting",
			"item": [
				{
					"_postman_id": "89c99e15-a629-4857-b351-628f882dce05",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc24cb66-e882-4b8a-b879-2d287078efab",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "85128308-2c28-40e7-ad7e-c056a7f1384a",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fcc1415c-0861-4516-8843-bfc3717a76d9",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "5d621eb1-cad6-4271-a298-4563bc800f2a",
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5c9709-886d-4de4-ba32-d608cbdd2a23",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"}",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "42e2f2d3-3f1f-4d20-a70c-66c747847024",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "86addd21-7592-4795-9e8e-e2eae32bb2b6",
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "3f913e13-053f-4b26-abcb-c6d63c1e115b",
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc7ad4ba-930a-452d-9388-a6d0c60d6c80",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "72fcb3f7-d5ed-432e-89c4-db1a2c3c82cb",
					"name": "Add citizen to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "72aa1e0b-a4d9-4197-99f8-4435b9777414",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be 1', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "2e8acc9d-c391-4634-aef3-2b5facdc1d93",
					"name": "Citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71f4bbb0-ea58-43b0-8cdd-49ee23c51d2c",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "d684eeae-588d-41f6-ab75-c2d2deb772c9",
			"name": "Check update service information",
			"item": [
				{
					"_postman_id": "748e19f5-b0ae-4add-b9e9-450316c743ee",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4dd23acf-1f43-42be-b965-0b11121f33f3",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbca8d4-50d9-4dde-9239-af3c987949b8",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        allOK.should.be.eql(true);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "0de00997-156f-4745-a221-c433b699f5ca",
					"name": "Create citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3bbd88a-25fd-4fe6-ae7e-359373df02ac",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "8c1db976-ed1b-40cc-8700-916685108979",
					"name": "Edit specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb1437e9-c5af-4a60-8218-34b6d7fa9140",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"};",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d98b7a5-dcf9-4b07-95f1-3dcce4f5bb18",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Debug.",
									"    console.log(allElements);",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "3208982a-8599-4edb-8232-b7d9b1bc0c16",
					"name": "Add property tax via phone service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "ed76d473-748a-4cb8-a882-382466739d49",
					"name": "List specific citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24bec902-0987-4b2b-a2c6-ac2b26899f7a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"    ",
									"    //  Save the service request ID for later.",
									"    var mySRId = allElements[0].service_reqs[0].sr_id;",
									"    postman.setEnvironmentVariable(\"current_sr_id\", JSON.stringify(mySRId));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c2398b74-2e56-4f32-9cf6-64f0738a6a65",
					"name": "Begin serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2c672650-7d92-4dab-98e0-cd8032c950d4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now twor periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "ccc5589c-ef31-4fe1-8ea0-f4d4a9af0fa1",
					"name": "Update quantity from 3 to 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "153a139d-0daa-4031-ba0a-e7204ade2648",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct quantity update\", function() {",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (allElements[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : {{citizen_quantity_update}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "d8f9af92-ee15-49cc-95a3-ce80997c1c2a",
					"name": "Update service from PropTax to MSP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8faaa693-a7a4-45ed-9318-325a498a98af",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_response_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service update\", function() {",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (allElements[0].service_id).should.be.eql(citizenService);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_id\" : {{service_MSP_id}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "5d178598-3d6c-4cd5-bd48-1c1e1cec5aa1",
					"name": "Finish serving citizen",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc41b2c7-a55f-4b16-bda5-78e0d3dfd395",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for citizen finished\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "c657f7be-f716-470d-a9b6-3120271664a1",
			"name": "Check pick qtxn customer",
			"item": [
				{
					"_postman_id": "b452d36d-b55e-4403-9e51-7718cb1dbd51",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f95832a-57ef-4dcf-bdfe-916d2eb5d006",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0aa4fd7b-529c-4f26-9998-c77d6c28eeb4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        citizenCount.should.be.eql(0);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "a2f8b78c-67a6-4553-aa56-838bc2a99972",
					"name": "First citizen - Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cac82cd1-b2c1-4019-bf8f-bf8dfed473ef",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"first_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "e04ad8a0-e817-4165-ba10-a100ec4739a7",
					"name": "First citizen - Edit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5c9709-886d-4de4-ba32-d608cbdd2a23",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"}",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad6c0690-5334-45c2-a7a7-e0dbf87a0b55",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "6ac0dfe3-2f51-4681-8725-de467a320583",
					"name": "First citizen - Prop Tax via phone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{first_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "b37c8e0b-a721-4ca5-964a-28e03c607037",
					"name": "First citizen - List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "af5b6bca-0bd7-4779-8a20-03dcb1bb5a32",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel.channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "4c3d4b08-4b95-4ad0-a3f5-025bca7ff1a4",
					"name": "First citizen - Add to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "700821a0-3a6f-4572-bcbe-f4506cff1a7e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "ee2aa324-5341-4f16-b9ba-3cd0adfdb061",
					"name": "Second citizen - Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5a2ef1c-c73c-4bc6-ba18-1370ba84bbe4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"second_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "f78395f1-05c4-44c6-8cbf-f4235eabf33d",
					"name": "Second citizen - Edit QTxn",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8a5ad3b-d092-40de-ad68-01e6061aeb16",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments,",
									"    \"qt_xn_citizen_ind\" : 1",
									"};",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2993be04-1b21-439a-a7ac-452699cfd7b3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "de120b1f-4484-4ae7-82a7-5f6fb477fbb8",
					"name": "Second citizen - MSP via email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{second_client}},\n\t\t\"quantity\" : {{citizen_quantity_update}},\n\t\t\"channel_id\" : {{channel_email_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "29b5788b-e4af-4321-880a-6e39ed4778dc",
					"name": "Second citizen - List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88ea6ef3-8474-4b41-8078-ad4d8f09525c",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "edca95c3-46da-4818-a1d2-f1a5e6a9001c",
					"name": "Second citizen - Add to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f522e76-9828-4bb1-a165-669dc532453e",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c41a5ba4-dcdd-4ab7-8ace-4e05da345b38",
					"name": "Check 2 citizens in queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "070b3e97-88a9-4e82-ae4e-cf476625b4b9",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09e9a82d-d782-4916-b84d-970d41f0e231",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"describe(\"There should be two citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 2\", function() {",
									"        citizenCount.should.be.eql(2);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "d68fae2d-9b38-424e-a06c-5bc3b2c0bc1e",
					"name": "Invite next citizen - should be second one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4be934e8-8807-468e-aa86-d0bf43af6f50",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "83188954-c9fc-42d7-8881-957990ced029",
					"name": "Second citizen - begin serving",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73a61ce9-4a36-4758-98ed-48e14fe1ec11",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one citizen being served this CSR', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "d319697d-33b6-4c57-a556-c91f7cd6595a",
					"name": "Second citizen - finish serving",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5ad9862-ba09-440e-8a89-6262e7750367",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "252f4429-4d67-4c62-bfbd-8d943f304ca5",
					"name": "Invite next citizen - should be first one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e7eccec-f891-448f-86c5-f34447447b13",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "e221deb1-b0e4-48cc-85ca-28361c63f55a",
					"name": "First citizen - citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "429fb7bd-e03c-4dbd-8760-fdfe0363b420",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen left\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "4a85cef2-c3f8-4faa-a0a1-98c0e8ae23be",
			"name": "Check pick non-qtxn customer",
			"item": [
				{
					"_postman_id": "8b8738c4-b807-481a-b6aa-78a33dbed73c",
					"name": "Check no citizens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9275086-164f-4f82-884f-75b5710f0b65",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first_nonqtxn);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0aa4fd7b-529c-4f26-9998-c77d6c28eeb4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"describe(\"There should be no citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 0\", function() {",
									"        citizenCount.should.be.eql(0);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c93eaf57-82c4-46f4-abbd-1db6fecb769d",
					"name": "First citizen - Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35c3241b-1fe5-423a-91bd-789ed675e61d",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"first_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "c873f0e8-2920-4bd0-a2f4-c6ff448f7b4a",
					"name": "First citizen - Edit QTxn",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8a5ad3b-d092-40de-ad68-01e6061aeb16",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments,",
									"    \"qt_xn_citizen_ind\" : 1",
									"};",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a0aa390-5a1b-486e-9a37-de0ceb367d28",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "ca7b36d3-14f8-42f4-82db-dcae88cf753b",
					"name": "First citizen - MSP via email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{first_client}},\n\t\t\"quantity\" : {{citizen_quantity_update}},\n\t\t\"channel_id\" : {{channel_email_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "9cff3541-f00a-4fc2-b521-dccce3abd99f",
					"name": "First citizen - List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b833276-a7db-4005-9c30-ba1f09410ab3",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "9d3dc159-7592-4ec3-ba7a-055671e5bad2",
					"name": "First citizen - Add to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "244f7ba7-ec08-4394-a455-86f0b1e1d333",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "4581671c-5e16-4d33-9357-2e5557f05156",
					"name": "Second citizen - Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dde23c45-a5d4-4ff0-85a0-bac3873a8574",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for one added citizen, correct initial values\", function() {",
									"        it('Only one citizen should be created', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_name must be null', function() {",
									"            (!currentCitizen.citizen_name).should.be.eql(true);",
									"        });",
									"        it('citizen_comments must be null', function() {",
									"            (!currentCitizen.citizen_comments).should.be.eql(true);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"second_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "f547081a-8519-428b-a8b9-4dabfd787f8b",
					"name": "Second citizen - Edit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb5c9709-886d-4de4-ba32-d608cbdd2a23",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Get data, create JSON body.",
									"var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"var bodyData = {",
									"    \"citizen_name\" : citizenName,",
									"    \"citizen_comments\" : citizenComments",
									"}",
									"",
									"//  Store the data in an environment variable.",
									"postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cce8696f-b703-4070-b49f-cf409e0a7456",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs must empty (no service requests)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{putBody}}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "6a6ecfbb-07b0-4d05-9268-5716c88d698d",
					"name": "Second citizen - Prop Tax via phone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa6f6a3b-e4e7-42b6-a8d3-ecda3840418a",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.create_response_test);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{second_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "482f31b8-2d01-4970-95e2-307c39595797",
					"name": "Second citizen - List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36d5276d-8310-458e-a0a7-4a319a6c1f80",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 1 (single period)', function() {",
									"            (currentCitizen.service_reqs[0].periods.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs periods channel must be ' + citizenChannel, function() {",
									"            (currentCitizen.service_reqs[0].channel_id).should.be.eql(citizenChannel);",
									"        });",
									"        it('service_reqs periods state must be \"Ticket Creation\"', function() {",
									"            (currentCitizen.service_reqs[0].periods[0].ps.ps_name).should.be.eql(\"Ticket Creation\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "5027ab73-3217-47cb-b8a8-656a0eabed0e",
					"name": "Second citizen - Add to queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4dfcd97b-fb97-424e-b984-8816f5ce0ba4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 2 (now two periods)', function() {",
									"            (allPeriods.length).should.be.eql(2);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Waiting\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Waiting\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "4a3007ab-51ad-4700-940f-13d6d06870d1",
					"name": "Check 2 citizens in queue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "070b3e97-88a9-4e82-ae4e-cf476625b4b9",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09e9a82d-d782-4916-b84d-970d41f0e231",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"describe(\"There should be two citizens in the office\", function() {",
									"    it(\"Length of citizen queue should be 2\", function() {",
									"        citizenCount.should.be.eql(2);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "dd07099e-ae9e-456d-95a7-3781a06ad9cd",
					"name": "Invite next citizen - should be second one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06144ff7-794a-4c66-89a1-b19b7180b2ee",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "a0bed33f-b12f-4fbc-a673-c845a0bd038b",
					"name": "Second citizen - begin serving",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a260cb9a-c4ae-4bf3-9167-2e01cfc3b9e4",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one citizen being served this CSR', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Active\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Active\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (now four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Being Served\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Being Served\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "2c9590ec-8378-4c87-80bc-8bad57c6ac7b",
					"name": "Second citizen - finish serving",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3967d0d6-56de-462e-a592-1aa8cfb1ffb6",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 4 (still four periods)', function() {",
									"            (allPeriods.length).should.be.eql(4);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "b321266d-75cb-416d-b712-ad8be7b4ed34",
					"name": "Invite next citizen - should be first one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b2db367c-d5d2-4289-a194-6c854bc90c0f",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct service updates\", function() {",
									"        it('Must be one active citizen in the office', function() {",
									"            citizenIds.length.should.be.eql(1);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Pending\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Pending\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (now three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must only be one open period', function() {",
									"            openPeriodCount.should.be.eql(1);",
									"        });",
									"        it('open period state must be \"Invited\"', function() {",
									"            openPeriod.ps.ps_name.should.be.eql(\"Invited\");",
									"        });",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"_postman_id": "df2fc2e9-936f-43ab-bbf7-ac965302e1f8",
					"name": "First citizen - citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "becda71c-71d6-4d2f-bad5-1a7a17da6128",
								"type": "text/javascript",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce764cd5-ad7f-43af-907c-c8c7e42ade41",
								"type": "text/javascript",
								"exec": [
									"//  Install postmanBDD, json-bigint parse and stringify.",
									"eval(globals.postmanBDD);",
									"eval(globals.json_bigint_parse);",
									"",
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    describe(\"Check for correct citizen left\", function() {",
									"        it('Must be no active citizens in the office', function() {",
									"            citizenIds.length.should.be.eql(0);",
									"        });",
									"        it('citizen_id must equal \"' + currentCitizenId + '\"', function() {",
									"            (currentCitizen.citizen_id).should.be.eql(currentCitizenId);",
									"        });",
									"        it('citizen_name must equal \"' + citizenName + '\"', function() {",
									"            (currentCitizen.citizen_name).should.be.eql(citizenName);",
									"        });",
									"        it('citizen_comment must equal \"' + citizenComment + '\"', function() {",
									"            (currentCitizen.citizen_comments).should.be.eql(citizenComment);",
									"        });",
									"        it('service_reqs length must be 1 (single service request)', function() {",
									"            (currentCitizen.service_reqs.length).should.be.eql(1);",
									"        });",
									"        it('service_reqs state must be \"Complete\"', function() {",
									"            (currentCitizen.service_reqs[0].sr_state.sr_code).should.be.eql(\"Complete\");",
									"        });",
									"        it('service_reqs service must be ' + citizenService, function() {",
									"            (currentCitizen.service_reqs[0].service_id).should.be.eql(citizenService);",
									"        });",
									"        it('service_reqs quantity must be ' + citizenQuantity, function() {",
									"            (currentCitizen.service_reqs[0].quantity).should.be.eql(citizenQuantity);",
									"        });",
									"        it('service_reqs periods length must be 3 (three periods)', function() {",
									"            (allPeriods.length).should.be.eql(3);",
									"        });",
									"        it('must be no open periods (service is complete', function() {",
									"            openPeriodCount.should.be.eql(0);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_nonqtxn}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			]
		}
	]
}